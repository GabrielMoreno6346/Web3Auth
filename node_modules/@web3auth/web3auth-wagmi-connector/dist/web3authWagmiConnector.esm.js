import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { Connector, UserRejectedRequestError, normalizeChainId } from '@wagmi/core';
import { getChainConfig, CHAIN_NAMESPACES, WALLET_ADAPTERS, ADAPTER_STATUS, ADAPTER_EVENTS } from '@web3auth/base';
import { Web3AuthCore } from '@web3auth/core';
import { OpenloginAdapter } from '@web3auth/openlogin-adapter';
import LoginModal, { getAdapterSocialLogins, OPENLOGIN_PROVIDERS, LOGIN_MODAL_EVENTS } from '@web3auth/ui';
import { ethers } from 'ethers';
import { getAddress } from 'ethers/lib/utils';
import log from 'loglevel';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
const IS_SERVER = typeof window === "undefined";
class Web3AuthConnector extends Connector {
  constructor(config) {
    var _this$options$uiConfi, _this$options$uiConfi2;

    super(config);

    _defineProperty(this, "ready", !IS_SERVER);

    _defineProperty(this, "id", "web3Auth");

    _defineProperty(this, "name", "web3Auth");

    _defineProperty(this, "provider", void 0);

    _defineProperty(this, "web3AuthInstance", void 0);

    _defineProperty(this, "isModalOpen", false);

    _defineProperty(this, "web3AuthOptions", void 0);

    _defineProperty(this, "loginModal", void 0);

    _defineProperty(this, "socialLoginAdapter", void 0);

    this.web3AuthOptions = config.options;
    const chainId = config.options.chainId ? parseInt(config.options.chainId, 16) : 1;
    const chainConfig = this.chains.filter(x => x.id === chainId);
    const defaultChainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, config.options.chainId || "0x1");

    let finalChainConfig = _objectSpread({
      chainNamespace: CHAIN_NAMESPACES.EIP155
    }, defaultChainConfig);

    if (chainConfig.length > 0) {
      var _chainConfig$0$native, _chainConfig$0$native2, _chainConfig$, _chainConfig$$blockEx;

      finalChainConfig = _objectSpread(_objectSpread({}, finalChainConfig), {}, {
        chainNamespace: CHAIN_NAMESPACES.EIP155,
        chainId: config.options.chainId || "0x1",
        rpcTarget: chainConfig[0].rpcUrls.default,
        displayName: chainConfig[0].name,
        tickerName: (_chainConfig$0$native = chainConfig[0].nativeCurrency) === null || _chainConfig$0$native === void 0 ? void 0 : _chainConfig$0$native.name,
        ticker: (_chainConfig$0$native2 = chainConfig[0].nativeCurrency) === null || _chainConfig$0$native2 === void 0 ? void 0 : _chainConfig$0$native2.symbol,
        blockExplorer: (_chainConfig$ = chainConfig[0]) === null || _chainConfig$ === void 0 ? void 0 : (_chainConfig$$blockEx = _chainConfig$.blockExplorers.default) === null || _chainConfig$$blockEx === void 0 ? void 0 : _chainConfig$$blockEx.url
      });
    }

    this.web3AuthInstance = new Web3AuthCore({
      clientId: config.options.clientId,
      enableLogging: config.options.enableLogging,
      storageKey: config.options.storageKey,
      chainConfig: _objectSpread({
        chainNamespace: CHAIN_NAMESPACES.EIP155
      }, finalChainConfig)
    });
    this.socialLoginAdapter = new OpenloginAdapter({
      adapterSettings: _objectSpread({}, config.options),
      chainConfig: finalChainConfig
    });
    this.web3AuthInstance.configureAdapter(this.socialLoginAdapter);
    this.loginModal = new LoginModal({
      theme: (_this$options$uiConfi = this.options.uiConfig) === null || _this$options$uiConfi === void 0 ? void 0 : _this$options$uiConfi.theme,
      appLogo: ((_this$options$uiConfi2 = this.options.uiConfig) === null || _this$options$uiConfi2 === void 0 ? void 0 : _this$options$uiConfi2.appLogo) || "",
      version: "",
      adapterListener: this.web3AuthInstance,
      displayErrorsOnModal: this.options.displayErrorsOnModal
    });
    this.subscribeToLoginModalEvents();
  }

  async connect() {
    try {
      var _this$options$uiConfi3, _this$options$uiConfi4;

      await this.loginModal.initModal();
      this.loginModal.addSocialLogins(WALLET_ADAPTERS.OPENLOGIN, getAdapterSocialLogins(WALLET_ADAPTERS.OPENLOGIN, this.socialLoginAdapter, (_this$options$uiConfi3 = this.options.uiConfig) === null || _this$options$uiConfi3 === void 0 ? void 0 : _this$options$uiConfi3.loginMethodConfig), ((_this$options$uiConfi4 = this.options.uiConfig) === null || _this$options$uiConfi4 === void 0 ? void 0 : _this$options$uiConfi4.loginMethodsOrder) || OPENLOGIN_PROVIDERS);

      if (this.web3AuthInstance.status !== ADAPTER_STATUS.READY) {
        await this.web3AuthInstance.init();
      } // Check if there is a user logged in


      const isLoggedIn = await this.isAuthorized(); // if there is a user logged in, return the user

      if (isLoggedIn) {
        const provider = await this.getProvider();
        return {
          provider,
          chain: {
            id: 0,
            unsupported: false
          },
          account: await this.getAccount()
        };
      }

      this.loginModal.open();
      const elem = document.getElementById("w3a-container");
      elem.style.zIndex = "10000000000";
      return await new Promise((resolve, reject) => {
        this.web3AuthInstance.once(ADAPTER_EVENTS.CONNECTED, async () => {
          const signer = await this.getSigner();
          const account = await signer.getAddress();
          const provider = await this.getProvider();

          if (provider.on) {
            provider.on("accountsChanged", this.onAccountsChanged);
            provider.on("chainChanged", this.onChainChanged);
            provider.on("disconnect", this.onDisconnect);
          }

          return resolve({
            account,
            chain: {
              id: 0,
              unsupported: false
            },
            provider
          });
        });
        this.web3AuthInstance.once(ADAPTER_EVENTS.ERRORED, err => {
          log.error("error while connecting", err);
          return reject(err);
        });
      });
    } catch (error) {
      log.error("error while connecting", error);
      throw new UserRejectedRequestError("Something went wrong");
    }
  }

  async getAccount() {
    const provider = new ethers.providers.Web3Provider(await this.getProvider());
    const signer = provider.getSigner();
    const account = await signer.getAddress();
    return account;
  }

  async getProvider() {
    if (this.provider) {
      return this.provider;
    }

    this.provider = this.web3AuthInstance.provider;
    return this.provider;
  }

  async getSigner() {
    const provider = new ethers.providers.Web3Provider(await this.getProvider());
    const signer = provider.getSigner();
    return signer;
  }

  async isAuthorized() {
    try {
      const account = await this.getAccount();
      return !!(account && this.provider);
    } catch {
      return false;
    }
  }

  async getChainId() {
    try {
      const networkOptions = this.socialLoginAdapter.chainConfigProxy;

      if (typeof networkOptions === "object") {
        const chainID = networkOptions.chainId;

        if (chainID) {
          return normalizeChainId(chainID);
        }
      }

      throw new Error("Chain ID is not defined");
    } catch (error) {
      log.error("error", error);
      throw error;
    }
  }

  async disconnect() {
    await this.web3AuthInstance.logout();
    this.provider = null;
  }

  onAccountsChanged(accounts) {
    if (accounts.length === 0) this.emit("disconnect");else this.emit("change", {
      account: getAddress(accounts[0])
    });
  }

  onChainChanged(chainId) {
    const id = normalizeChainId(chainId);
    const unsupported = this.isChainUnsupported(id);
    this.emit("change", {
      chain: {
        id,
        unsupported
      }
    });
  }

  onDisconnect() {
    this.emit("disconnect");
  }

  subscribeToLoginModalEvents() {
    this.loginModal.on(LOGIN_MODAL_EVENTS.LOGIN, async params => {
      try {
        await this.web3AuthInstance.connectTo(params.adapter, params.loginParams);
      } catch (error) {
        log.error(`Error while connecting to adapter: ${params.adapter}`, error);
      }
    });
    this.loginModal.on(LOGIN_MODAL_EVENTS.DISCONNECT, async () => {
      try {
        await this.disconnect();
      } catch (error) {
        log.error(`Error while disconnecting`, error);
      }
    });
  }

}

export { Web3AuthConnector };
//# sourceMappingURL=web3authWagmiConnector.esm.js.map
