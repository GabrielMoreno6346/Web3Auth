/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Web3AuthConnector": () => (/* reexport */ Web3AuthConnector)
});

;// CONCATENATED MODULE: external "@babel/runtime/helpers/defineProperty"
const defineProperty_namespaceObject = require("@babel/runtime/helpers/defineProperty");
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty_namespaceObject);
;// CONCATENATED MODULE: external "@wagmi/core"
const core_namespaceObject = require("@wagmi/core");
;// CONCATENATED MODULE: external "@web3auth/base"
const base_namespaceObject = require("@web3auth/base");
;// CONCATENATED MODULE: external "@web3auth/core"
const external_web3auth_core_namespaceObject = require("@web3auth/core");
;// CONCATENATED MODULE: external "@web3auth/openlogin-adapter"
const openlogin_adapter_namespaceObject = require("@web3auth/openlogin-adapter");
;// CONCATENATED MODULE: external "@web3auth/ui"
const ui_namespaceObject = require("@web3auth/ui");
var ui_default = /*#__PURE__*/__webpack_require__.n(ui_namespaceObject);
;// CONCATENATED MODULE: external "ethers"
const external_ethers_namespaceObject = require("ethers");
;// CONCATENATED MODULE: external "ethers/lib/utils"
const utils_namespaceObject = require("ethers/lib/utils");
;// CONCATENATED MODULE: external "loglevel"
const external_loglevel_namespaceObject = require("loglevel");
var external_loglevel_default = /*#__PURE__*/__webpack_require__.n(external_loglevel_namespaceObject);
;// CONCATENATED MODULE: ./src/lib/connector.ts


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty_default()(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }









const IS_SERVER = typeof window === "undefined";
class Web3AuthConnector extends core_namespaceObject.Connector {
  constructor(config) {
    var _this$options$uiConfi, _this$options$uiConfi2;

    super(config);

    defineProperty_default()(this, "ready", !IS_SERVER);

    defineProperty_default()(this, "id", "web3Auth");

    defineProperty_default()(this, "name", "web3Auth");

    defineProperty_default()(this, "provider", void 0);

    defineProperty_default()(this, "web3AuthInstance", void 0);

    defineProperty_default()(this, "isModalOpen", false);

    defineProperty_default()(this, "web3AuthOptions", void 0);

    defineProperty_default()(this, "loginModal", void 0);

    defineProperty_default()(this, "socialLoginAdapter", void 0);

    this.web3AuthOptions = config.options;
    const chainId = config.options.chainId ? parseInt(config.options.chainId, 16) : 1;
    const chainConfig = this.chains.filter(x => x.id === chainId);
    const defaultChainConfig = (0,base_namespaceObject.getChainConfig)(base_namespaceObject.CHAIN_NAMESPACES.EIP155, config.options.chainId || "0x1");

    let finalChainConfig = _objectSpread({
      chainNamespace: base_namespaceObject.CHAIN_NAMESPACES.EIP155
    }, defaultChainConfig);

    if (chainConfig.length > 0) {
      var _chainConfig$0$native, _chainConfig$0$native2, _chainConfig$, _chainConfig$$blockEx;

      finalChainConfig = _objectSpread(_objectSpread({}, finalChainConfig), {}, {
        chainNamespace: base_namespaceObject.CHAIN_NAMESPACES.EIP155,
        chainId: config.options.chainId || "0x1",
        rpcTarget: chainConfig[0].rpcUrls.default,
        displayName: chainConfig[0].name,
        tickerName: (_chainConfig$0$native = chainConfig[0].nativeCurrency) === null || _chainConfig$0$native === void 0 ? void 0 : _chainConfig$0$native.name,
        ticker: (_chainConfig$0$native2 = chainConfig[0].nativeCurrency) === null || _chainConfig$0$native2 === void 0 ? void 0 : _chainConfig$0$native2.symbol,
        blockExplorer: (_chainConfig$ = chainConfig[0]) === null || _chainConfig$ === void 0 ? void 0 : (_chainConfig$$blockEx = _chainConfig$.blockExplorers.default) === null || _chainConfig$$blockEx === void 0 ? void 0 : _chainConfig$$blockEx.url
      });
    }

    this.web3AuthInstance = new external_web3auth_core_namespaceObject.Web3AuthCore({
      clientId: config.options.clientId,
      enableLogging: config.options.enableLogging,
      storageKey: config.options.storageKey,
      chainConfig: _objectSpread({
        chainNamespace: base_namespaceObject.CHAIN_NAMESPACES.EIP155
      }, finalChainConfig)
    });
    this.socialLoginAdapter = new openlogin_adapter_namespaceObject.OpenloginAdapter({
      adapterSettings: _objectSpread({}, config.options),
      chainConfig: finalChainConfig
    });
    this.web3AuthInstance.configureAdapter(this.socialLoginAdapter);
    this.loginModal = new (ui_default())({
      theme: (_this$options$uiConfi = this.options.uiConfig) === null || _this$options$uiConfi === void 0 ? void 0 : _this$options$uiConfi.theme,
      appLogo: ((_this$options$uiConfi2 = this.options.uiConfig) === null || _this$options$uiConfi2 === void 0 ? void 0 : _this$options$uiConfi2.appLogo) || "",
      version: "",
      adapterListener: this.web3AuthInstance,
      displayErrorsOnModal: this.options.displayErrorsOnModal
    });
    this.subscribeToLoginModalEvents();
  }

  async connect() {
    try {
      var _this$options$uiConfi3, _this$options$uiConfi4;

      await this.loginModal.initModal();
      this.loginModal.addSocialLogins(base_namespaceObject.WALLET_ADAPTERS.OPENLOGIN, (0,ui_namespaceObject.getAdapterSocialLogins)(base_namespaceObject.WALLET_ADAPTERS.OPENLOGIN, this.socialLoginAdapter, (_this$options$uiConfi3 = this.options.uiConfig) === null || _this$options$uiConfi3 === void 0 ? void 0 : _this$options$uiConfi3.loginMethodConfig), ((_this$options$uiConfi4 = this.options.uiConfig) === null || _this$options$uiConfi4 === void 0 ? void 0 : _this$options$uiConfi4.loginMethodsOrder) || ui_namespaceObject.OPENLOGIN_PROVIDERS);

      if (this.web3AuthInstance.status !== base_namespaceObject.ADAPTER_STATUS.READY) {
        await this.web3AuthInstance.init();
      } // Check if there is a user logged in


      const isLoggedIn = await this.isAuthorized(); // if there is a user logged in, return the user

      if (isLoggedIn) {
        const provider = await this.getProvider();
        return {
          provider,
          chain: {
            id: 0,
            unsupported: false
          },
          account: await this.getAccount()
        };
      }

      this.loginModal.open();
      const elem = document.getElementById("w3a-container");
      elem.style.zIndex = "10000000000";
      return await new Promise((resolve, reject) => {
        this.web3AuthInstance.once(base_namespaceObject.ADAPTER_EVENTS.CONNECTED, async () => {
          const signer = await this.getSigner();
          const account = await signer.getAddress();
          const provider = await this.getProvider();

          if (provider.on) {
            provider.on("accountsChanged", this.onAccountsChanged);
            provider.on("chainChanged", this.onChainChanged);
            provider.on("disconnect", this.onDisconnect);
          }

          return resolve({
            account,
            chain: {
              id: 0,
              unsupported: false
            },
            provider
          });
        });
        this.web3AuthInstance.once(base_namespaceObject.ADAPTER_EVENTS.ERRORED, err => {
          external_loglevel_default().error("error while connecting", err);
          return reject(err);
        });
      });
    } catch (error) {
      external_loglevel_default().error("error while connecting", error);
      throw new core_namespaceObject.UserRejectedRequestError("Something went wrong");
    }
  }

  async getAccount() {
    const provider = new external_ethers_namespaceObject.ethers.providers.Web3Provider(await this.getProvider());
    const signer = provider.getSigner();
    const account = await signer.getAddress();
    return account;
  }

  async getProvider() {
    if (this.provider) {
      return this.provider;
    }

    this.provider = this.web3AuthInstance.provider;
    return this.provider;
  }

  async getSigner() {
    const provider = new external_ethers_namespaceObject.ethers.providers.Web3Provider(await this.getProvider());
    const signer = provider.getSigner();
    return signer;
  }

  async isAuthorized() {
    try {
      const account = await this.getAccount();
      return !!(account && this.provider);
    } catch {
      return false;
    }
  }

  async getChainId() {
    try {
      const networkOptions = this.socialLoginAdapter.chainConfigProxy;

      if (typeof networkOptions === "object") {
        const chainID = networkOptions.chainId;

        if (chainID) {
          return (0,core_namespaceObject.normalizeChainId)(chainID);
        }
      }

      throw new Error("Chain ID is not defined");
    } catch (error) {
      external_loglevel_default().error("error", error);
      throw error;
    }
  }

  async disconnect() {
    await this.web3AuthInstance.logout();
    this.provider = null;
  }

  onAccountsChanged(accounts) {
    if (accounts.length === 0) this.emit("disconnect");else this.emit("change", {
      account: (0,utils_namespaceObject.getAddress)(accounts[0])
    });
  }

  onChainChanged(chainId) {
    const id = (0,core_namespaceObject.normalizeChainId)(chainId);
    const unsupported = this.isChainUnsupported(id);
    this.emit("change", {
      chain: {
        id,
        unsupported
      }
    });
  }

  onDisconnect() {
    this.emit("disconnect");
  }

  subscribeToLoginModalEvents() {
    this.loginModal.on(ui_namespaceObject.LOGIN_MODAL_EVENTS.LOGIN, async params => {
      try {
        await this.web3AuthInstance.connectTo(params.adapter, params.loginParams);
      } catch (error) {
        external_loglevel_default().error(`Error while connecting to adapter: ${params.adapter}`, error);
      }
    });
    this.loginModal.on(ui_namespaceObject.LOGIN_MODAL_EVENTS.DISCONNECT, async () => {
      try {
        await this.disconnect();
      } catch (error) {
        external_loglevel_default().error(`Error while disconnecting`, error);
      }
    });
  }

}
;// CONCATENATED MODULE: ./src/index.ts

module.exports = __webpack_exports__;
/******/ })()
;
//# sourceMappingURL=web3authWagmiConnector.cjs.js.map